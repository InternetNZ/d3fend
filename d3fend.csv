d3fend-id,tactic,label,definition,how-it-works,url
D3-ANCI,Evict,Credential Eviction: Authentication Cache Invalidation,Removing tokens or credentials from an authentication cache to prevent further user associated account accesses.,Applications can locally cache user authentication credentials for certain server connections. An application may attempt to use the cached credential for a connection. If the cached credentials exist then the user will not be typically prompted for new credentials.,https://d3fend.mitre.org/technique/d3f:AuthenticationCacheInvalidation
D3-AL,Evict,Credential Eviction: Account Locking,The process of temporarily disabling user accounts on a system or domain.,"Management servers with enterprise policies for account management provide the ability to enable and disable account for given rules. The rules may include specific periods of time (eg. weekend, plant shutdown, leave periods), specific user types or groups, or individual users.",https://d3fend.mitre.org/technique/d3f:AccountLocking
D3-PT,Evict,Process Eviction: Process Termination,Terminating a running application process on a computer system.,"Processes are managed by the operating system kernel.  Different operating system kernels manage the creation and termination of processes in a different manner, and expose this functionality via the kernel API.

A running process might be terminated to mitigate its immediate effects if it is exhibiting anomalous, unauthorized, or malicious behavior; such as after detecting anomalous behavior via <a href=""https://d3fend.mitre.org/technique/d3f:AdministrativeNetworkActivityAnalysis"" rdf:about=""https://d3fend.mitre.org/ontologies/d3fend.owl#AdministrativeNetworkActivityAnalysis"">Administrative Network Activity Analysis</a>, after a failed check from <a href=""https://d3fend.mitre.org/technique/d3f:StackFrameCanaryVerification"" rdf:about=""https://d3fend.mitre.org/ontologies/d3fend.owl#StackFrameCanaryVerification"">Stack Frame Canary Verification</a>, or after <a href=""https://d3fend.mitre.org/technique/d3f:SystemCallAnalysis"" rdf:about=""https://d3fend.mitre.org/ontologies/d3fend.owl#SystemCallAnalysis"">System Call Analysis</a> finds an attempt to execute an unauthorized system call.",https://d3fend.mitre.org/technique/d3f:ProcessTermination
D3-DP,Deceive,Decoy Object: Decoy Persona,"Establishing a fake online identity to misdirect, deceive, and or interact with adversaries.","A false online identity is created for the purposes of interacting with adversaries in a direct or indirect manner. This includes the associated email addresses, social media accounts, and other online communication profiles.",https://d3fend.mitre.org/technique/d3f:DecoyPersona
D3-DF,Deceive,Decoy Object: Decoy File,A file created for the purposes of deceiving an adversary.,"The decoy file is made available as a local or network resource. Accesses to the file may be monitored. The files may be configurations, documents, executables, or other file types.",https://d3fend.mitre.org/technique/d3f:DecoyFile
D3-DPR,Deceive,Decoy Object: Decoy Public Release,Issuing publicly released media to deceive adversaries.,"Publicly released media includes press release, videos, or other marketing collateral. The media may include URLs, points of contact, or other identifiers to entice interaction from adversaries.",https://d3fend.mitre.org/technique/d3f:DecoyPublicRelease
D3-DNR,Deceive,Decoy Object: Decoy Network Resource,Deploying a network resource for the purposes of deceiving an adversary.,"Decoy network resources are deployed to web application servers, network file shares, or other network based sharing services.

A ""honeypot"" may serve a variety of decoy network resources.",https://d3fend.mitre.org/technique/d3f:DecoyNetworkResource
D3-DUC,Deceive,Decoy Object: Decoy User Credential,A Credential created for the purpose of deceiving an adversary.,"A detection analytic is developed to determine when a user uses decoy credentials. Subsequent actions by that user may be monitored or controlled by the defender.

A credential may be:
 * Domain username and password
 * Local system username and password",https://d3fend.mitre.org/technique/d3f:DecoyUserCredential
D3-DST,Deceive,Decoy Object: Decoy Session Token,An authentication token created for the purposes of deceiving an adversary.,Usage of decoy session tokens may be monitored to track attacker behavior or otherwise control the beliefs of the attacker.,https://d3fend.mitre.org/technique/d3f:DecoySessionToken
D3-SHN,Deceive,Decoy Environment: Standalone Honeynet,An environment created for the purpose of attracting attackers and eliciting their behaviors that is not connected to any production enterprise systems.,"A standalone honeynet does not directly interact with the real enterprise environment. It may be located near or in some portion of the enterprise address space, but it does not interact with enterprise resources.",https://d3fend.mitre.org/technique/d3f:StandaloneHoneynet
D3-CHN,Deceive,Decoy Environment: Connected Honeynet,"A decoy service, system, or environment, that is connected to the enterprise network, and simulates or emulates certain functionality to the network, without exposing full access to a production system.",Decoy honeypots are deployed within the enterprise environment that emulate certain services or portions of an OS to attract attackers.,https://d3fend.mitre.org/technique/d3f:ConnectedHoneynet
D3-IHN,Deceive,Decoy Environment: Integrated Honeynet,The practice of setting decoys in a production environment to entice interaction from attackers.,"Integrated honeynets use full production environments connected to the enterprise network, that utilize computing resources or software that attract attackers, and allow full interaction and access that provides a complete view of an attack.",https://d3fend.mitre.org/technique/d3f:IntegratedHoneynet
D3-FEMC,Detect,Platform Monitoring: Firmware Embedded Monitoring Code,Monitoring code is injected into firmware for integrity monitoring of firmware and firmware data.,"Firmware in deployed network devices is typically not monitored for malicious changes. This technique provides a method to embed a software security component into the deployed firmware which provides a near real-time monitoring hook. The exception handling code, in the firmware, is typically used to expose any detected vulnerabilities.

The injected software components provide a feature similar to intrusion detection systems for the firmware by detecting unauthorized modifications of the embedded firmware. The integrity of static code and firmware data are monitored continuously in the hosted devices. Comparisons are made to monitored elements like firmware memory addresses and data segments. Memory pages are scanned and if a modification is detected the software component may lock the page. This will protect subsequent attempted modifications to the firmware. The software component may utilize the exception handling code and thus be able to disclose the exact address of the modified memory.

The injected software components are inserted during the firmware imaging process. The injected software is assumed to have knowledge of both the embedded code and the current execution state of the host program. The injected software will monitor and alert, in near real-time, on potential suspicious activity. The injected code is run alongside of the embedded code in the host. The injected software operates as an independent entity and is not dependent on the host software. 

Finally, this technique may implement other countermeasure techniques as part of their analytical processes. These should be identified by referencing other countermeasure techniques directly as necessary.",https://d3fend.mitre.org/technique/d3f:FirmwareEmbeddedMonitoringCode
D3-OSM,Detect,Platform Monitoring: Operating System Monitoring,"The operating system software, for D3FEND’s purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.",,https://d3fend.mitre.org/technique/d3f:OperatingSystemMonitoring
D3-FBA,Detect,Platform Monitoring: Firmware Behavior Analysis,Analyzing the behavior of embedded code in firmware and looking for anomalous behavior and suspicious activity.,"Firmware behavior analysis provides protections by ensuring that installed firmware has not been tampered with or modified. Firmware analysis applies to mutable firmware and immutable read-only memory (ROMs).

Firmware in deployed network devices is typically not analyzed and monitored for vulnerabilities and thus is subject to potential attacks. This technique makes use of known and measured behavioral attributes, including timing attributes, of analyzed firmware on deployed devices. 

A behavioral method that employs known timing measurements may use the timing results from a challenge and response protocol to detect the presence of malware in embedded firmware. Firmware device timing measurements are made, specific to the installed device, and are used in the verifying function.

The original firmware image is modified by injecting a monitoring software component into the embedded firmware code. The injected software components will allow for a software root of trust, the challenge and response protocol, to be implement in the firmware. 

A challenge-response is issued and includes a nonce so that replays are not allowed. The firmware will calculate a checksum over all of memory, including the nonce, and return the result. The verification system will compare the computed checksum and the time it took for the computation of the checksum to determine if the firmware has been modified.",https://d3fend.mitre.org/technique/d3f:FirmwareBehaviorAnalysis
D3-FV,Detect,Platform Monitoring: Firmware Verification,Using embedded trust identification markers to identify legitimate firmware and hardware configurations.,"Valid firmware, and hardware configurations, are identified and marked with a trust identification value. The trust identification value is stored on one of the embedded devices of the trusted configuration. A centralized database of trusted values is maintained for the identified configurations on a trust server, and they are used in the validation process.

The validation process uses a trust server to validate deployed trusted configurations by employing an attestation protocol. The user defined values and specific hardware values are cryptographically compared to the stored trust values on the devices . Comparisons that fail the attestation test are deemed untrusted.",https://d3fend.mitre.org/technique/d3f:FirmwareVerification
D3-SFA,Detect,Operating System Monitoring: System File Analysis,"Monitoring system files such as authentication databases, registry keys, system logs, and system executables, for modification or tampering.",This technique ensures the integrity of system owned file resources. System files can impact the behavior below the user level.,https://d3fend.mitre.org/technique/d3f:SystemFileAnalysis
D3-USICA,Detect,Operating System Monitoring: User Session Init Config Analysis,Analyzing modifications to user session config files such as .bashrc or .bash_profile.,,https://d3fend.mitre.org/technique/d3f:UserSessionInitConfigAnalysis
D3-IDA,Detect,Operating System Monitoring: Input Device Analysis,Operating system level mechanisms to prevent abusive input device exploitation.,"Input Device Hardening techniques filter certain commands, or disable related operating system functionality.",https://d3fend.mitre.org/technique/d3f:InputDeviceAnalysis
D3-EHB,Detect,Operating System Monitoring: Endpoint Health Beacon,"Monitoring the security status of an endpoint by sending periodic messages with health status, where absence of a response may indicate that the endpoint has been compromised.","Endpoints are configured to periodically generate and transmit a secure heartbeat that is delivered on a configured schedule and provides endpoint status information. Status information can include software details (version, configuration, etc), endpoint identification (MAC, IP address, machine ID) or other hardware/software configuration information. Interruption of the heartbeat can signal that the endpoint has been compromised.",https://d3fend.mitre.org/technique/d3f:EndpointHealthBeacon
D3-SDM,Detect,Operating System Monitoring: System Daemon Monitoring,Tracking changes to the state or configuration of critical system level processes.,"Attackers may manipulate system settings or services to disable system logging or monitoring of security tools and events. Firewall and antivirus services are popular targets for attackers. Disabling system logs will also allow an attacker's actions to go unnoticed. Analysis of logs, registries, and process monitoring help defenders locate signs of tampering. Two possible approaches are to monitor hardened system services or to monitor registry updates for modifications to security settings.",https://d3fend.mitre.org/technique/d3f:SystemDaemonMonitoring
D3-SJA,Detect,Operating System Monitoring: Scheduled Job Analysis,"Analysis of source files, processes, destination files, or destination servers associated with a scheduled job to detect unauthorized use of job scheduling.","Scheduled job execution can be utilized by adversaries for the purpose of persistence, conducting remote execution, or gaining privileges. Details of a scheduled job such as associated source files, processes, destination files, or destination servers are first identified and analyzed and then compared against an anti-malware signature database, whitelist, or reputation server. For example, a file associated with a scheduled job to be executed at a specified time or a remote server that is accessed as part of a scheduled task is compared against an anti-malware signature database, whitelist, or reputation server, and if a match is found, execution is denied and an alert is generated.

In addition to traditional scheduled jobs, triggers can be set to execute a specific command after detecting a specific event in the system, such as with WMI Event Subscriptions in Windows.",https://d3fend.mitre.org/technique/d3f:ScheduledJobAnalysis
D3-MBT,Detect,Operating System Monitoring: Memory Boundary Tracking,Analyzing a call stack for return addresses which point to unexpected  memory locations.,"This technique monitors for indicators of whether a return address is outside memory previously allocated for an object (i.e. function, module, process, or thread). If so, code that the return address points to is treated as malicious code.",https://d3fend.mitre.org/technique/d3f:MemoryBoundaryTracking
D3-LAM,Detect,Operating System Monitoring: Local Account Monitoring,Analyzing local user accounts to detect unauthorized activity.,,https://d3fend.mitre.org/technique/d3f:LocalAccountMonitoring
D3-PCA,Detect,Certificate Analysis: Passive Certificate Analysis,Collecting host certificates from network traffic or other passive sources like a certificate transparency log and analyzing them for unauthorized activity.,"Certificates are analyzed outside of a TLS server connection using third-party secure update logs, domain name analysis and analytics.",https://d3fend.mitre.org/technique/d3f:PassiveCertificateAnalysis
D3-ACA,Detect,Certificate Analysis: Active Certificate Analysis,Actively collecting PKI certificates by connecting to the server and downloading its server certificates for analysis.,"Analysis of server certificates using active methods to detect if certificates have been misconfigured or spoofed by using elements of the certificate, certificate authorities and signatures.",https://d3fend.mitre.org/technique/d3f:ActiveCertificateAnalysis
D3-SBV,Detect,System File Analysis: Service Binary Verification,Analyzing changes in service binary files by comparing to a source of truth.,System service applications may originate from the operating system installation or third-party applications installed with administrative privileges. These services have an entry point of some executable file-- a binary or a script. Attackers sometimes modify these executables to launch their own code. Analyzing changes in these files may uncover unauthorized activity.,https://d3fend.mitre.org/technique/d3f:ServiceBinaryVerification
D3-PLA,Detect,Process Spawn Analysis: Process Lineage Analysis,"Identification of suspicious processes executing on an end-point device by examining the ancestry and siblings of a process, and the associated metadata of each node on the tree, such as process execution, duration, and order relative to siblings and ancestors.","Process tree analysis techniques gather information on how a process was initiated to determine if a process is malicious. For example, if a process was not initiated from boot or not initiated by another process, that process is identified as suspicious. Also, if a new process was started before a process initiated by the device (ex. during boot) and that new process was not initiated by a user (which can be determined by examining process parameters such as type of process, its creator, source, etc.) the process is identified as suspicious. 

For example, Microsoft Word may block execution of any subprocess that is not in an approved path.",https://d3fend.mitre.org/technique/d3f:ProcessLineageAnalysis
D3-HD,Detect,Identifier Analysis: Homoglyph Detection,Comparing strings using a variety of techniques to determine if a deceptive or malicious string is being presented to a user.,"A homoglyph, in this context, is a deceptive string or word which looks like a trusted word, but is composed of different characters, for example: goooogle.com versus google.com. This is commonly found in phishing and typo squatting attacks where a human exploiting through a social engineering campaign.",https://d3fend.mitre.org/technique/d3f:HomoglyphDetection
D3-UA,Detect,Identifier Analysis: URL Analysis,Determining if a URL is benign or malicious by analyzing the URL or its components.,"URLs may contain components, for example:

 * scheme
 * userinfo
 * host name
 * port
 * path
 * query
 * fragment

These components are used as features in analysis algorithms.

Contextual information about a URL such as where it is embedded (ex. emails, files, network protocols), header, path, location, and origin information, as well as information about the content returned from the URL request, may be incorporated into an analytic for URL analysis. For example, if a URL indicates a .pdf file but an executable is actually returned, the combination of these two pieces of information indicates suspicious activity.

Additional techniques include:

* Extracting features of a URL such as domain name length, ratio of consecutive consonants, percentage of digits in a domain, and number of vowels. Values for each feature are combined to develop a score for the URL. 
* Determining the probability of a character occurring in the URL given the preceding two characters. For example, for google.com, the probability of a 'g' occurring at the beginning of a word, the probability of an 'o' occurring after a “g, the probability of an “o’ occurring after a 'g' and “o, and so forth. A dictionary or a list of known good domains is used to determine probability. Probabilities are multiplied to develop a score for the URL.

URL analysis may trigger follow-on analytics such as **File Analysis**",https://d3fend.mitre.org/technique/d3f:URLAnalysis
D3-FAPA,Detect,Process Analysis: File Access Pattern Analysis,Analyzing the files accessed by a process to identify unauthorized activity.,"File modifying malware such as wipers and ransomware are detected by identifying file access patterns that are associated with a malicious process. Examples of file access patterns include accessing a large number of files, accessing multiple file types, files being accessed located in multiple locations in a directory, and copying a file and encrypting the contents of that file into a copy. These patterns are used to a assign a risk score for the process behavior and if over a threshold, a preventive action is taken.",https://d3fend.mitre.org/technique/d3f:FileAccessPatternAnalysis
D3-SCA,Detect,Process Analysis: System Call Analysis,Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.,"System calls are APIs between a user application and the operating system [1].

By analyzing a process's use of these APIs, it is, in some cases, possible to ascertain whether a program is exhibiting unauthorized behavior, including trying to escalate its privileges.",https://d3fend.mitre.org/technique/d3f:SystemCallAnalysis
D3-PCSV,Detect,Process Analysis: Process Code Segment Verification,"Comparing the ""text"" or ""code"" memory segments to a source of truth.",A process code segment is an executable portion of computer memory allocated to a particular process. Process Code Segment Verification implements verification to compare a process code segment to some expected value.,https://d3fend.mitre.org/technique/d3f:ProcessCodeSegmentVerification
D3-SSC,Detect,Process Analysis: Shadow Stack Comparisons,Comparing a call stack in system memory with a shadow call stack maintained by the processor to determine unauthorized shellcode activity.,This technique compares the call stack stored in system memory with the shadow call stack maintained in the cache memory of the processor.  Mismatches between the two are compared since a return oriented programming attack may only be able to control or spoof the call stack and not the shadow call stack. Mismatches are counted and if the number of mismatches exceeds a certain threshold it is an indication of unauthorized activity and a security response action is performed.,https://d3fend.mitre.org/technique/d3f:ShadowStackComparisons
D3-PSMD,Detect,Process Analysis: Process Self-Modification Detection,"Detects processes that modify, change, or replace their own code at runtime.",,https://d3fend.mitre.org/technique/d3f:ProcessSelf-ModificationDetection
D3-PSA,Detect,Process Analysis: Process Spawn Analysis,Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.,"Process attributes are established when an operating system spawns a new process. These attributes are analyzed to look for the presence or absence of specific values or patterns. 

Some attributes of interest are:
 - user
 - process name
 - image path
 - security content",https://d3fend.mitre.org/technique/d3f:ProcessSpawnAnalysis
D3-SEA,Detect,Process Analysis: Script Execution Analysis,Analyzing the execution of a script to detect unauthorized user activity.,"Software installed on the host system hooks into a scripting engine to intercept commands before they are executed and block commands if they are determined to be harmful. Pattern matching is used to identify unauthorized commands or in the case of script files, a hash of the file is compared against hashes of known unauthorized script files.",https://d3fend.mitre.org/technique/d3f:ScriptExecutionAnalysis
D3-IBCA,Detect,Process Analysis: Indirect Branch Call Analysis,Analyzing vendor specific branch call recording in order to detect ROP style attacks.,"This technique is used to detect an attacker attempting to exploit and execute code on a target system’s call stack using return-oriented programming (ROP). Modern processors that have the ability to maintain a list of the branching calls, e.g., Intel's Last Branch Recording (LBR), can be used to track and analyze indirect branching calls that are indicative of malicious activity.

In order to reduce the number of indirect branch calls to analyze to a manageable set it is assumed that malicious ROP activity will involve the use of system calls.  The technique observes indirect branch calls that are part of paths that lead to system calls, all others are ignored. Branching calls chained together is often referred to as gadgets and gadgets are often used in ROP attacks. Indirect branch calls that involve a transfer from user-space to kernel-space are of interest for this technique.

Identification of potential ROP exploit execution includes:

- Inspecting the LBR when a system function call is made

  - The LBR is configured to return only instruction of interest (ret, indirect jmp, indirect calls)


- Behavior is analyzed for 
  - Ret instructions that appear to target areas not preceded by the call sites
  - Sequences of small code fragments that appear to be chained through the indirect branching calls (gadgets)


- Of interest are returns that appear to not render control back after calls
  - Typical ret-call are paired
  - gadgets will appear to have ret followed by instruction of next instruction of the following gadget",https://d3fend.mitre.org/technique/d3f:IndirectBranchCallAnalysis
D3-DQSA,Detect,Process Analysis: Database Query String Analysis,Analyzing database queries to detect [SQL Injection](https://capec.mitre.org/data/definitions/66.html).,"Some implementations use software hooks to intercept function calls related to database query operations. Other implementations might intercept or collect network traffic. The database query string is then extracted and analyzed with various methods, for example:
* Detecting specific administrative SQL commands
* Anomalous sequences of commands when compared to a statistical baseline.
* Anomalous commands for a given user role.",https://d3fend.mitre.org/technique/d3f:DatabaseQueryStringAnalysis
,Detect,DNS Traffic Analysis: Fast Flux Detection,,,https://d3fend.mitre.org/technique/d3f:FastFluxDetection
,Detect,DNS Traffic Analysis: Parked Domain Detection,,,https://d3fend.mitre.org/technique/d3f:ParkedDomainDetection
,Detect,DNS Traffic Analysis: DNS Calc Detection,,,https://d3fend.mitre.org/technique/d3f:DNSCalcDetection
D3-RPA,Detect,Network Traffic Analysis: Relay Pattern Analysis,The detection of an internal host relaying traffic between the internal network and the external network.,"A relay may use a variety of proxying, forwarding, or routing technologies to bridge a protected network with an external network. A defensive analytic to detect a relay network may compare the network sessions among multiple hosts. Hosts which have nearly similar network statistics may be part of a relay network. The statistics may include number of bytes sent to and from, time of session initiation, packet size, or packet arrival time data.",https://d3fend.mitre.org/technique/d3f:RelayPatternAnalysis
D3-CA,Detect,Network Traffic Analysis: Certificate Analysis,"Analyzing Public Key Infrastructure certificates to detect if they have been misconfigured or spoofed using both network traffic, certificate fields and third-party logs.","Certificate Analysis ensures that the data elements of the certificate are current and anchored in a known trust model. Certificate authorities, revocation lists, and third-party secure logs are used in the analysis. Analysis includes detection of server impersonation, phishing domains, and forged certificates.

TLS certificates are designed to expire to ensure that the cryptographic keys are forced to be changed on a regular basis. The certificates in the trust path also expire and can cause a break in the trust chain. This means that even if a server certificate is updated correctly, intermediate certificates can expire and the trust chain is not maintained. This can cause services to become unavailable.",https://d3fend.mitre.org/technique/d3f:CertificateAnalysis
D3-RTA,Detect,Network Traffic Analysis: RPC Traffic Analysis,Monitoring the activity of remote procedure calls in communication traffic to establish standard protocol operations and potential attacker activities.,"A remote procedure call (RPC) enables one computer to execute a specific function on another computer, as if it were a local application process. There are numerous RPC specifications and implementations. RPC capabilities can be abused by attackers in order to achieve a variety of tactical objectives including execution, persistence, initial access, and more. RPC proxies may be used to collect and store RPC traffic. RPCs can occur over network sockets or named pipes.

Analytics look for unauthorized behavior such as:

* Processes being launched or scheduled remotely
* System configurations being changed remotely
* Unauthorized file read activity

Example RPC Protocols:

* DCE/RPC
* CORBA
* Open Network Computing Remote Procedure Call
* D-Bus
* XML-RPC
* JSON-RPC
* SOAP
* Apache Thrift",https://d3fend.mitre.org/technique/d3f:RPCTrafficAnalysis
D3-CAA,Detect,Network Traffic Analysis: Connection Attempt Analysis,Analyzing failed connections in a network to detect unauthorized activity.,Connection Attempt Analysis in multiple ways.,https://d3fend.mitre.org/technique/d3f:ConnectionAttemptAnalysis
D3-BSE,Detect,Network Traffic Analysis: Byte Sequence Emulation,Analyzing sequences of bytes and determining if they likely represent malicious shellcode.,"Bytes are analyzed as if they are machine code instructions, and such instructions that are a common component of known shellcode are noted, such as stack pivots, reads from a Memory Address Table, and system calls for functions that disable protections or execute code.  For example, the x86 instruction `b0 0b: mov $11, %ax`, with no further alterations to the `%ax` register, followed by `cd 80: syscall` executes the system call `execve()` in the Linux kernel, which replaces the current process with another one specified -- this is a common action in shellcode, so this sequence would be flagged. 

This technique detects shellcode despite whether or not it would cause a buffer overflow in the target binary.

If the sequence of bytes contains a sequence similar to that used in malicious shellcode, the entire byte sequence is flagged and a follow-on technique may be invoked.",https://d3fend.mitre.org/technique/d3f:ByteSequenceEmulation
D3-PHDURA,Detect,Network Traffic Analysis: Per Host Download-Upload Ratio Analysis,Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.,"Aggregate pull vs. push ratios from metadata are used to develop a baseline for a given host over a specific time period, e.g., over a three-hour period, one day, one week, etc. Anomalies identified over a threshold produce an alert.",https://d3fend.mitre.org/technique/d3f:PerHostDownload-UploadRatioAnalysis
D3-DNSTA,Detect,Network Traffic Analysis: DNS Traffic Analysis,"Analysis of domain name metadata, including name and DNS records, to determine whether the domain is likely to resolve to an undesirable host.","This technique can be accomplished in a number of ways. 

* One example analytic determines whether or not a domain name was generated with an algorithm. Domain generation algorithms (DGAs) are sometimes used to create a domain name automatically  that will resolve to C2 infrastructure, without directly coding the domains in question into the malicious code. 
* Another method analyzes information about domains that have been visited, including whether a domain name is longer than a common length,  if a dynamic DNS domain was visited, if a fast-flux domain was visited, and if a recently created domain was visited. These factors are used to develop a score and if that score is over a certain threshold, an alert is generated. 
* Collected malware samples can be executed in a virtual environment to identify network domains that are connected to during execution. The network domains are then generated into signatures to identity bad domains for other hosts.

This technique does not check for content hosted at the domain.",https://d3fend.mitre.org/technique/d3f:DNSTrafficAnalysis
D3-NTCD,Detect,Network Traffic Analysis: Network Traffic Community Deviation,Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.,"Hosts/users within a computer network are analyzed to identify communities of hosts which frequently communicate. Future communications between communities that don't usually communicate can then be detected.  For example, if a community of hosts that communicate in support of a company's finance division suddenly starts to access the code server usually accessed only by engineers, this may indicate unauthorized activity.",https://d3fend.mitre.org/technique/d3f:NetworkTrafficCommunityDeviation
D3-ANAA,Detect,Network Traffic Analysis: Administrative Network Activity Analysis,Detection of unauthorized use of administrative network protocols by analyzing network activity against a baseline.,"Network protocols such as RDP, IPMI, SSH, SNMP, VNC, MOSH, NX, TeamViewer, SPICE, PCoIP, and others are used by system administrators to remotely manage servers. Defenders monitor administrative network activity to determine if the use of remote protocols is malicious. Attackers can abuse administrative protocols and leverage them for initial access to various endpoints. For example, an attacker with valid credentials will remotely SSH or RDP into a server and attempt to blend in with existing traffic from system administrators. By monitoring the traffic activity, it is possible to detect when the protocols are behaving differently from a known baseline of system administration activity.",https://d3fend.mitre.org/technique/d3f:AdministrativeNetworkActivityAnalysis
D3-PMAD,Detect,Network Traffic Analysis: Protocol Metadata Anomaly Detection,Collecting network communication protocol metadata and identifying statistical outliers.,"Network protocol metadata is first collected and processed in real-time or post-facto. Metadata may include packet header information or information about a session (ex. time between requests/responses). Metadata is then grouped based on shared characteristics and those groups are compared to each other. If particular metadata differs significantly from other data, an alert is generated, identifying the network event as anomalous. Anomalous activity may indicate unauthorized activity.",https://d3fend.mitre.org/technique/d3f:ProtocolMetadataAnomalyDetection
D3-CSPP,Detect,Network Traffic Analysis: Client-server Payload Profiling,Comparing client-server request and response payloads to a baseline profile to identify outliers.,"Profiling request and response payloads across multiple clients to a single server to develop a baseline of their characteristics. May take into account request/response sizes, entropy, frequency, and rhythm. Finally, identify outliers as they may indicate a malicious payload delivery and subsequent server exploitation.",https://d3fend.mitre.org/technique/d3f:Client-serverPayloadProfiling
D3-ISVA,Detect,Network Traffic Analysis: Inbound Session Volume Analysis,Analyzing inbound network session or connection attempt volume.,Network appliances are configured to alert on certain packets that typically are involved in DoS attacks. Typical packets include ICMP packets and SYN requests that are commonly used to flood networks. A sampling period is used to define a time window in which collected counts of the identified packets can be measured. If the collected number of packets exceeds a predefined limit then an alert is generated.,https://d3fend.mitre.org/technique/d3f:InboundSessionVolumeAnalysis
D3-FC,Detect,Network Traffic Analysis: File Carving,Extracting files from network application protocols through the use of network stream reassembly software.,"Protocol stream reassembly software recreates a directional byte stream by analyzing captured network packets. Once the stream is reassembled pattern matching is applied to determine if it contains a file of interest. Files of interest range from executable, archive, or document file formats. Once the file is captured, it is then processed with standard File Analysis Techniques.  Example network protocols include HTTP, SMTP, FTP, HTTP/2, and TLS/HTTP/Dropbox.",https://d3fend.mitre.org/technique/d3f:FileCarving
D3-IPCTA,Detect,Network Traffic Analysis: IPC Traffic Analysis,Analyzing standard inter process communication (IPC) protocols to detect deviations from normal protocol activity.,"Inter process communication enables applications or threads to share data. This can involve one or more computers. Monitoring IPC in your environment can reveal abnormal or malicious activity.
IPC can occur within a single computer or between multiple computers remotely through network protocols. Thus there are multiple ways to collect and monitor these exchanges between processes. A network protocol analyzer may monitor and parse SMB network traffic to record system activity. A host based monitoring agent may monitor IPC activity contained within a single host to look for deviations from standard usages.",https://d3fend.mitre.org/technique/d3f:IPCTrafficAnalysis
D3-RTSD,Detect,Network Traffic Analysis: Remote Terminal Session Detection,Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.,"An external attacker takes remote control of a host inside a company or organization’s network and manually directs offensive techniques. Nonstandard terminal sessions and abnormal behaviors are analyzed in this technique. Abnormal behavior detection includes analysis of user input patterns in the real-time session, keyboard output and packet inspection.",https://d3fend.mitre.org/technique/d3f:RemoteTerminalSessionDetection
D3-AZET,Detect,User Behavior Analysis: Authorization Event Thresholding,"Collecting authorization events, creating a baseline user profile, and determining whether authorization events are consistent with the baseline profile.","Authorization event data is collected to create a baseline user profile. Authorization events that deviate from the baseline and exceed a static or dynamic threshold are identified for further action. Authorization events can include successful and failed authorization attempts as well as events related to permissions including viewing, editing, deleting, creating files, databases etc.",https://d3fend.mitre.org/technique/d3f:AuthorizationEventThresholding
D3-WSAA,Detect,User Behavior Analysis: Web Session Activity Analysis,Monitoring changes in user web session behavior by comparing current web session activity to a baseline behavior profile or a catalog of predetermined malicious behavior.,"User web session data is collected over a period of time to create a user behavior profile. Data collected includes clicks made on a website, average time between clicks, filling out web forms, order in which pages are viewed, and downloading files. Current user web session behavior is then compared against the use behavior profile to identify anomalies and a likelihood that the current user web session is malicious. Current user web session behavior can also be compared to predetermined known malicious behavior profiles that are developed through analysis of malware in run time at a threat research facility.",https://d3fend.mitre.org/technique/d3f:WebSessionActivityAnalysis
D3-ANET,Detect,User Behavior Analysis: Authentication Event Thresholding,"Collecting authentication events, creating a baseline user profile, and determining whether authentication events are consistent with the baseline profile.","Authentication event data is collected (logon information such as device id, time of day, day of week, geo-location, etc.) to create an activity baseline. Then, a threshold is determined either through a manually specified configuration, or a statistical analysis of deviations in historical data. New authentication events are evaluated to determine if a threshold is exceeded. Thresholds can be static or dynamic.",https://d3fend.mitre.org/technique/d3f:AuthenticationEventThresholding
D3-UDTA,Detect,User Behavior Analysis: User Data Transfer Analysis,Analyzing the amount of data transferred by a user.,Unusual data transfer activity may indicate unauthorized activity. Data transfers can be analyzed by collecting network traffic or application logs.,https://d3fend.mitre.org/technique/d3f:UserDataTransferAnalysis
D3-RAPA,Detect,User Behavior Analysis: Resource Access Pattern Analysis,Analyzing the resources accessed by a user to identify unauthorized activity.,This technique analyzes a user's resource accesses by comparing the user’s recent activity against a baseline activity model. Major differences between the current activity and the baseline model might indicate unauthorized activity if they are severe enough.,https://d3fend.mitre.org/technique/d3f:ResourceAccessPatternAnalysis
D3-UGLPA,Detect,User Behavior Analysis: User Geolocation Logon Pattern Analysis,Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.,"Geolocation data for each user logon attempt is collected and used to create a baseline user behavior profile. Current geolocation logon data is then compared against the user behavior profile. Logon activity that deviates from normal patterns and can help in identifying situations that may be indicative of a remote attacker using stolen credentials. For example: 

* logons from locations that are different from where a user usually logs in
* logons from a location in which an enterprise has no users located
* logon that is not physically possible given the elapsed time since a logon from another location.",https://d3fend.mitre.org/technique/d3f:UserGeolocationLogonPatternAnalysis
D3-SDA,Detect,User Behavior Analysis: Session Duration Analysis,Analyzing the duration of user sessions in order to detect unauthorized  activity.,Detecting unauthorized user sessions by comparing the duration of a user logon session with a baseline behavior model. The behavior model comprises historical user session duration times.  Abnormalities between session duration and the behavior model may indicate suspicious activity.,https://d3fend.mitre.org/technique/d3f:SessionDurationAnalysis
D3-JFAPA,Detect,User Behavior Analysis: Job Function Access Pattern Analysis,"Detecting anomalies in user access patterns by comparing user access activity to behavioral profiles that categorize users by role such as job title, function, department.","Peer group analysis identifies functionally similar groups of actors (users or resources) based on categorizations such as job title, organizational hierarchy, or other attribute that indicates similarity of job function. Current user access activity is then compared to the appropriate peer group behavior profile to identify anomalies.",https://d3fend.mitre.org/technique/d3f:JobFunctionAccessPatternAnalysis
D3-SMRA,Detect,Message Analysis: Sender MTA Reputation Analysis,Characterizing the reputation of mail transfer agents (MTA) to determine the security risk in emails.,"The sender message transfer agent (MTA) trust rating can be considered an indicator of the level of security risk and/or a trust level associated with sender MTAs in an email header.

The features considered in determining the trust rating may include: 

* Length of time MTA has interacted with the enterprise
* Number of sender domains sending emails from the MTA
* Number of recipients in the enterprise the MTA sends emails to
* Number of emails received from this MTA
* Number of email replies received from this MTA

For example, higher values for the length of time an MTA has interacted with the enterprise, or number of emails received from an MTA can result in a higher trust rating. The trust rating categorizes the sender MTA as unrated, neutral, trusted, suspicious, or malicious.",https://d3fend.mitre.org/technique/d3f:SenderMTAReputationAnalysis
D3-SRA,Detect,Message Analysis: Sender Reputation Analysis,Ascertaining sender reputation based on information associated with a message (e.g. email/instant messaging).,"Sender trust rating can be considered an indicator of the level of security risk and/or a trust level associated with a sender. The features considered in determining the trust rating include:

* Length of time sender has sent emails to the enterprise
* Number of recipients in the enterprise the sender interacts with
* Sender vs. enterprise originated message ratio
* Sender messages opened vs. not-opened ratio
* Number of emails received from this sender 
* Number of emails replied to this sender
* Number of emails from this sender not opened
* Number of emails from this sender not opened that contain an attachment
* Number of emails from this sender not opened that contain a URL
* Number of emails sent to this sender
* Number of email replies received from this sender.

Higher values for the number of recipients the sender has interacted with or the number of emails received from the sender, for example, results in a higher trust rating. The trust rating can categorize the sender as unrated, neutral, trusted, suspicious, or malicious.",https://d3fend.mitre.org/technique/d3f:SenderReputationAnalysis
D3-DA,Detect,File Analysis: Dynamic Analysis,"Executing or opening a file in a synthetic ""sandbox"" environment to determine if the file is a malicious program or if the file exploits another program such as a document reader.","Analyzing the interaction of a piece of code with a system while the code is being executed in a controlled environment such as a sandbox, virtual machine, or simulator. This exposes the natural behavior of the piece of code without requiring the code to be disassembled.",https://d3fend.mitre.org/technique/d3f:DynamicAnalysis
D3-EFA,Detect,File Analysis: Emulated File Analysis,Emulating instructions in a file looking for specific patterns.,,https://d3fend.mitre.org/technique/d3f:EmulatedFileAnalysis
D3-FH,Detect,File Analysis: File Hashing,Employing file hash comparisons to detect known malware.,This technique requires a list of hashes to compare a file against.,https://d3fend.mitre.org/technique/d3f:FileHashing
D3-FCR,Detect,File Analysis: File Content Rules,Employing a pattern matching rule language to analyze files.,"Rules, often called signatures, are used for both generic and targeted malware detection. The rules are usually expressed in a domain specific language (DSL), then deployed to software that scans files for matches. The rules are developed and broadly distributed by commercial vendors, or they are developed and deployed by enterprise security teams to address highly targeted or custom malware. Conceptually, there are public and private rule sets. Both leverage the same technology, but they are intended to detect different types of cyber adversaries.",https://d3fend.mitre.org/technique/d3f:FileContentRules
D3-DLIC,Harden,Platform Hardening: Driver Load Integrity Checking,Ensuring the integrity of drivers loaded during initialization of the operating system.,"This technique can be accomplished in a number of ways:

* A kernel level security agent installed on a host machine ensures that the driver associated with the agent is first in the initialization order. A dependent DLL associated with the driver is configured to be processed before other dependent DLLs and executes a number of operations to ensure the driver associated with the security agent is initialized first.

* Kernel components can be signed by a certificate obtained by a third party to verify the source of the component and whether it has been modified. When signed, the component will include a signature block implemented as a hash value of the component header and can also include a certificate chain. The signature and certificate data are typically added before the kernel component is distributed to the public.",https://d3fend.mitre.org/technique/d3f:DriverLoadIntegrityChecking
D3-BA,Harden,Platform Hardening: Bootloader Authentication,Cryptographically authenticating the bootloader software before system boot.,,https://d3fend.mitre.org/technique/d3f:BootloaderAuthentication
D3-SU,Harden,Platform Hardening: Software Update,Replacing old software on a computer system component.,,https://d3fend.mitre.org/technique/d3f:SoftwareUpdate
D3-TBI,Harden,Platform Hardening: TPM Boot Integrity,Assuring the integrity of a platform by demonstrating that the boot process starts from a trusted combination of hardware and software and continues until the operating system has fully booted and applications are running.  Sometimes called Static Root of Trust Measurement (STRM).,"During the boot process, the BIOS boot block (which with this defense enabled, is the Core Root of Trust for Measurement) measures boot components (firmware, ROM). The TPM hashes those measurements and stores the hashes in Platform Configuration Registers (PCRs).  Upon a subsequent boot, these hashes are provided to a verifier which compares the stored measurements to the new boot measurements. Integrity of the boot components is assured if they match.  

Attestation of the secure boot occurs when a verifying entity requests a Quote which is a concatenation of the requested PCR values, hashed and signed by the TPM's unique RSA key.  The TPM signature is trusted because the private key is stored securely in hardware and never leaves the TPM.",https://d3fend.mitre.org/technique/d3f:TPMBootIntegrity
D3-RFS,Harden,Platform Hardening: RF Shielding,Adding physical barriers to a platform to prevent undesired radio interference.,,https://d3fend.mitre.org/technique/d3f:RFShielding
D3-DENCR,Harden,Platform Hardening: Disk Encryption,Encrypting a hard disk partition to prevent cleartext access to a file system.,,https://d3fend.mitre.org/technique/d3f:DiskEncryption
D3-EHPV,Harden,Application Hardening: Exception Handler Pointer Validation,Validates that a referenced exception handler pointer is a valid exception handler.,,https://d3fend.mitre.org/technique/d3f:ExceptionHandlerPointerValidation
D3-SFCV,Harden,Application Hardening: Stack Frame Canary Verification,Comparing a value stored in a stack frame with a known good value in order to prevent or detect a memory segment overwrite.,"This defense must be applied at compile-time, or via a patch to the program binary.  Stack Frame Canary Verification inserts instructions at the prologue and epilogue of desired functions.  In the prologue, a canary value, typically with the same size as the register size, is stored in the system of record and on the stack.  Typically, the canary is loaded to where it has a memory address just below that of the saved instruction pointer and base pointer.  In the epilogue, the canary value stored on the stack and, is compared to the canary value in the system of record.  If the values are different, other techniques such as those in Process Eviction might be invoked, such as Process Termination to end the current process, or Executable Blacklisting to blacklist the potentially vulnerable or malfunctioning executable.

Stack Frame Canary Verification is commonly used to detect potential tampering of a saved register value on the stack before it has been restored.  Examples of registers with values commonly saved to the stack include the instruction pointer and the base pointer.

The canary should be stored between where the start of a buffer overrun is likely, and the data to protect, in cases where the buffer size increases it will overwrite the data to be protected.

On most processor architectures, including x86, x64, and ARM, a “push” operation to store data to the stack grows the stack towards a lower memory address.  As in these architectures, saved register values are stored to the stack at a point in time just before space is made for the local function variables, the saved register values have a higher address than that of the local function variables.  Values at increasing indexes of a buffer are written to increasing memory addresses; therefore, an overwrite in the local variable buffer could overwrite saved register values, and a stack canary between these two would be useful in detecting an overwrite.

On some other processor architectures such as the B5000, the stack grows towards increasing memory addresses, and some architectures, such as System Z and RCA1802A, stack direction can be chosen.  If the stack grows towards increasing memory addresses, while this architecture inherently provides more protection against a saved register being overwritten, other data including local function variables might be overwritten.",https://d3fend.mitre.org/technique/d3f:StackFrameCanaryVerification
D3-PAN,Harden,Application Hardening: Pointer Authentication,Comparing the cryptographic hash or derivative of a pointer's value to an expected value.,,https://d3fend.mitre.org/technique/d3f:PointerAuthentication
D3-DCE,Harden,Application Hardening: Dead Code Elimination,"Removing unreachable or ""dead code"" from compiled source code.","Dead code is code that is considered unreachable by normal program execution. Dead code can be created by adding code under a condition that never evaluates to true. Dead code should be removed since this type of code can produce unexpected results, if accidentally or maliciously forced to execute.

Dead code identification is typically performed by algorithms that implement program flows analysis looking for unreachable code. The dead code is eliminated by instructing compilers to remove the code through compiler flags, i.e., ‘-fdce’ is used for Dead Code Elimination.",https://d3fend.mitre.org/technique/d3f:DeadCodeElimination
D3-SAOR,Harden,Application Hardening: Segment Address Offset Randomization,Randomizing the base (start) address of one or more segments of memory during the initialization of a process.,"Many application exploits rely on an attacker specifying a location in memory, which points to data or code used by the attacker.  If the addresses are changed each time the program is run, then it becomes more difficult for the attacker to determine the location that will contain the code they wish to run.

Imported modules may be similarly realigned if their default memory addresses conflict with other modules, in a process known as ""rebasing.""  Just as not all code is built for participation in ASLR, not all modules can be rebased; instead, modules must indicate whether they implement support for rebasing.  Such information to relocate the executable is typically stored in the "".reloc"" segment -- each of the addresses pointed to in this segment has its address increased by the amount of the offset.
(An alternative method for relocation would be to add an amount to a global variable each time -- leading to less overhead in the module load, but more for each access.  Still another implementation could instead contain code to deference each changeable memory location on the fly, so that each of the references do not need to be updated.",https://d3fend.mitre.org/technique/d3f:SegmentAddressOffsetRandomization
D3-PSEP,Harden,Application Hardening: Process Segment Execution Prevention,Preventing execution of any address in a memory region other than the code segment.,"During execution of a process, the instruction pointer register should only point to addresses in a code segment (also called the .text segment), as this is the sole segment which should contain program code.

When this technique detects an attempt to execute something that has been designated as non-executable, other techniques such as those in **Process Eviction** might be invoked, such as **Process Termination** to end the current process, or **Executable Blacklisting** to blacklist the potentially vulnerable or malfunctioning executable.",https://d3fend.mitre.org/technique/d3f:ProcessSegmentExecutionPrevention
D3-MENCR,Harden,Message Hardening: Message Encryption,Encrypting a message body using a cryptographic key.,,https://d3fend.mitre.org/technique/d3f:MessageEncryption
D3-TAAN,Harden,Message Hardening: Transfer Agent Authentication,Validating that server components of a messaging infrastructure are authorized to send a particular message.,"Transfer Agent Authentication can be accomplished in different ways for depending on the protocol. In Email,  Sender Policy Framework (SPF), Domain Key Identified Email (DKIM) or Domain-based Message Authentication Reporting and Conformance (DMARC) to validate sender domain ownership.",https://d3fend.mitre.org/technique/d3f:TransferAgentAuthentication
D3-MAN,Harden,Message Hardening: Message Authentication,Authenticating the sender of a message and ensuring message integrity.,,https://d3fend.mitre.org/technique/d3f:MessageAuthentication
D3-OTP,Harden,Credential Hardening: One-time Password,A one-time password is valid for only one user authentication.,"When a user initiates authentication, they are asked for a one-time password, often in addition to other credentials such as a traditional password or smart card. The one-time password may be from a list provided in advance, sent via a channel such as SMS or HTTPS to an app, or a generated token.

In the case of a physical token which generates one-time passwords incrementally based on time elapsed, that token device need not be connected to the internet. In different implementations, an administrator of the system, or a user with additional verification, can adjust for clock skew between the token and the verification system as needed.",https://d3fend.mitre.org/technique/d3f:One-timePassword
D3-MFA,Harden,Credential Hardening: Multi-factor Authentication,Requiring proof of two or more pieces of evidence in order to authenticate a user.,"When logging into an account users present two or more credentials that fall into different categories: something you know (password or PIN), something you have (smart card or phone), or something you are (fingerprint).",https://d3fend.mitre.org/technique/d3f:Multi-factorAuthentication
D3-CP,Harden,Credential Hardening: Certificate Pinning,Persisting either a server's X509 certificate or their public key and comparing that to server’s presented identity to allow for greater client confidence in the remote server's identity for SSL connections.,"Pinning allows for a trusted copy of a certificate or public key to be associated with a server and thus reducing the likelihood of frequently visited sites being subjected to man-in-the-middle attacks. Certificates or public keys can be pinned after a trusted connection has been established or the pinning can be preloaded in an application, which is the preferred method for mobile applications.

Pinning can take the form of certificate pinning or public key pinning.",https://d3fend.mitre.org/technique/d3f:CertificatePinning
D3-SPP,Harden,Credential Hardening: Strong Password Policy,Modifying system configuration to increase password strength.,"Password strength guidelines include increasing password length, permitting passwords that contain ASCII or Unicode characters, and requiring systems to screen new passwords against lists of commonly used or compromised passwords.",https://d3fend.mitre.org/technique/d3f:StrongPasswordPolicy
D3-HDDL,Isolate,Forward Resolution Domain Denylisting: Hierarchical Domain Denylisting,Blocking the resolution of any subdomain of a specified domain name.,"This technique is used to block DNS queries from related domains and subdomains that are unauthorized. 

Hierarchical domain blacklisting considers the blacklisting of second level domains and additional sub-domains and specific hosts for a given query value. A denylist is maintained that contains DNS names and corresponding subdomains, including wildcards, that should be blocked for a given lookup.",https://d3fend.mitre.org/technique/d3f:HierarchicalDomainDenylisting
D3-HDL,Isolate,Forward Resolution Domain Denylisting: Homoglyph Denylisting,Blocking DNS queries that are deceptively similar to legitimate domain names.,"Homoglyph domain blacklisting considers the domain and subdomain structure of a lookup and compares the named components to blacklisted named components. The blacklisted named components are typically crafted modifications of known good domains, e.g., gooogle.com versus google.com. The blacklisted domains typically resemble trusted domains, but have been altered slightly to deceive users.

The blacklisted named components also include consideration for fonts or Unicode characters that can make certain characters appear very similar (zero vs capital O and the letter l vs the number one). The blacklisted domains under certain fonts will appear to be a trusted domain.",https://d3fend.mitre.org/technique/d3f:HomoglyphDenylisting
D3-EDL,Isolate,Execution Isolation: Executable Denylisting,Blocking the execution of files on a host in accordance with defined application policy rules.,,https://d3fend.mitre.org/technique/d3f:ExecutableDenylisting
D3-MAC,Isolate,Execution Isolation: Mandatory Access Control,Controlling access to local computer system resources with kernel-level capabilities.,"Mandatory access control is a non-discretionary access control system because the rules and polices that determine access is determined by a security control authority and not distributed to local users. Access determinations are based on designed access control polices and are not based on local resource owner determinations.

Access is typically granted by defining sets of subjects and sets of objects. Subjects are the entities requesting access and objects are the resources that subjects are trying to access. Rules and policies are defined that associate subjects and object permissions and access controls.",https://d3fend.mitre.org/technique/d3f:MandatoryAccessControl
D3-HBPI,Isolate,Execution Isolation: Hardware-based Process Isolation,Preventing one process from writing to the memory space of another process through hardware based address manager implementations.,"Process isolation, in this context, is address space separation controlled by a security function that limits the communication between processes so that one process cannot directly modify the executing code of another process. For example with virtual address space:

* Process A address space is different from process B address space, which prevents process A from writing to process B

Hardware process isolation is commonly implemented through Direct Memory Access (DMA) which collaborates with a Memory Management Unit (MMU), or Input-Output Memory Management Unit (IOMMU). These hardware controls are deployed directly on processors to aid hosts or enclaves in process isolation.

* DMA - Direct memory access allows memory access to occur independently of the program currently run by the microprocessor. DMA allows for I/O devices to directly read from and write to memory, or it can be used to efficiently copy blocks of memory. During DMA transfers, the microprocessor can execute an unrelated program.
* MMU - A memory management unit acts as an access control and is responsible for performing the translation of virtual memory addresses to physical memory addresses. The MMU allocates each process its own virtual memory space.
* IOMMU - An input-output memory management unit is used to allocate each I/O device its own virtual address space to the underlying physical addresses. IOMMU allows devices that do not support long memory addresses to address the entire memory space.",https://d3fend.mitre.org/technique/d3f:Hardware-basedProcessIsolation
D3-EAL,Isolate,Execution Isolation: Executable Allowlisting,Using a digital signature to authenticate a file before opening.,"This technique is generic and there are numerous ways to compute and authenticate digital signatures. 
A digital certificate is generated from a private/public key pair issued by a certificate authority (CA). A hash of the file is encrypted using the private key. When the file is downloaded by another user, the user’s system uses the public key to decrypt the hash and a new hash is created of the downloaded file. The hash decrypted by the public key is compared to the new hash and if there is a mismatch, further techniques, such as file deletion, file quarantine, or **Executable Blacklisting** may be invoked.

This technique may be invoked when deciding whether to execute a file.",https://d3fend.mitre.org/technique/d3f:ExecutableAllowlisting
D3-RRDD,Isolate,DNS Denylisting: Reverse Resolution Domain Denylisting,Blocking a reverse DNS lookup's answer’s domain name value.,"In reverse resolution requests, the client sends to a nameserver (such as a DNS server) a query of an IP address, to get a response of the associated domain name(s). This technique drops reverse lookup responses where a domain name matches an entry in the blacklist, either verbatim or as a wildcard subdomain of a higher-level domain on the list. Such domain names might be unwanted because Forward Domain Name Resolution requests to such a blacklisted domain might return an unwanted IP address.

This technique is useful because relying solely on Forward Resolution Domain Blacklisting will miss instances where the domain in question is forward-resolved in a manner that is not inspected via a subsequent technique (as is likely the case if that resolution is performed with DoH (DNS over HTTPS) or DoT (DNS over TLS)). Additionally, note that responses to forward lookups of that domain are *not* necessarily equal to the original IP in the reverse lookup request, and that future lookups of a string based on this domain may even employ a less-common name resolution protocol, such as NBNS.

The DNS response can either be blocked by dropping the network traffic with an inline device, or by modifying the value of the response sent by the DNS server.  To prevent client applications from hanging on a request, it is common practice to replace malicious values, either with names like ""localhost."" or the address of a honeypot maintained by the network administrators.",https://d3fend.mitre.org/technique/d3f:ReverseResolutionDomainDenylisting
D3-RRID,Isolate,DNS Denylisting: Reverse Resolution IP Denylisting,Blocking a reverse lookup based on the query’s IP address value.,"This technique prevents a client from learning domains deemed to be potentially malicious, which would have been delivered via reverse resolution responses over the DNS protocol.

Queries for reverse resolution requests (that is, requests where IP(s) are sent and a domain is returned) are collected, and the IP address(es) included in the query are examined. If the IP address(es) are in a range included in the blacklist, then the query is dropped.",https://d3fend.mitre.org/technique/d3f:ReverseResolutionIPDenylisting
D3-FRDDL,Isolate,DNS Denylisting: Forward Resolution Domain Denylisting,Blocking a lookup based on the query’s domain name value.,Policies are created that filter DNS queries using fully qualified domain name (FQDN) of record in the query. A DNS policy can be created for blocking DNS queries from FQDNs that have been identified as unauthorized.,https://d3fend.mitre.org/technique/d3f:ForwardResolutionDomainDenylisting
D3-FRIDL,Isolate,DNS Denylisting: Forward Resolution IP Denylisting,Blocking a DNS lookup's answer's IP address value.,"This technique prevents a client from learning IP addresses deemed to be potentially malicious, which would have been delivered via forward resolution responses.

Responses to forward resolution requests (that is, requests where a domain is sent and IP(s) are returned) are collected, and the IP address(es) included as a response are examined. If the IP address(es) are in a range included in the blacklist, then the response is dropped and not forwarded to the client.

The DNS lookup can be blocked by either dropping the network traffic with an inline device, or modifying the value of the response sent by the DNS server. To transparently prevent client applications from hanging on a request, it is common practice to replace malicious values with addresses in the range 127.0.0.0/8 or the address of a honeypot maintained by the network administrators.",https://d3fend.mitre.org/technique/d3f:ForwardResolutionIPDenylisting
D3-OTF,Isolate,Network Isolation: Outbound Traffic Filtering,Restricting network traffic originating from a private host or enclave destined towards untrusted networks.,"Outbound traffic, in this context, is network traffic originating from a private host or enclave destined towards untrusted networks.
For example: 

* An enterprise desktop intranet user connecting to www.example.com
* An internal mail server connecting to an external mail server, mail.example.com

Filtering is commonly implemented as firewall rulesets to limit outbound traffic permitted to egress a host or network. Firewalls are deployed either directly on hosts through kernel level software implementations or installed in-line directly on network links. There are benefits and disadvantages to each approach.

There are various strategies for developing filtering rulesets:

* Block everything by default
* Limit destination hosts
* Limit destination transport or application protocols
* Restrict content outbound (Ex. strings formatted as social security numbers, or proprietary data)",https://d3fend.mitre.org/technique/d3f:OutboundTrafficFiltering
D3-ET,Isolate,Network Isolation: Encrypted Tunnels,Encrypted encapsulation of routable network traffic.,,https://d3fend.mitre.org/technique/d3f:EncryptedTunnels
D3-DNSAL,Isolate,Network Isolation: DNS Allowlisting,Permitting only approved domains and their subdomains to be resolved.,,https://d3fend.mitre.org/technique/d3f:DNSAllowlisting
D3-ITF,Isolate,Network Isolation: Inbound Traffic Filtering,Restricting network traffic originating from untrusted networks destined towards a private host or enclave.,"Inbound Traffic, in this context, is network traffic originating from an untrusted network towards a private host or enclave. 
For example:

* An untrusted network host connecting to a internal commercial portal, shopping.example.com
* An external mail server connecting to an internal mail server, mail.example.com

Filtering policies are developed by administrators to meet business requirements and limit connectivity. These policies are implemented on edge devices such as firewalls, routers, and intrusion prevention systems. Examples of filters:

* Blocking incoming traffic from spoofed internally facing IP addresses
* Blocking specific ports and services from establishing connections
* Limiting specific IP ranges from connecting to the network
* Dynamic inbound filtering (Hole punching, STUN, NAT-T)",https://d3fend.mitre.org/technique/d3f:InboundTrafficFiltering
D3-BDI,Isolate,Network Isolation: Broadcast Domain Isolation,Broadcast isolation restricts the number of computers a host can contact on their LAN.,"Software Defined Networking, or other network encapsulation technologies intercept host broadcast traffic then route it to a specified destination per a configured policy.

This can be implemented within hypervisors, networking hardware (WAPs, switches, routers), or virutal hardware.",https://d3fend.mitre.org/technique/d3f:BroadcastDomainIsolation
D3-DNSDL,Isolate,Network Isolation: DNS Denylisting,"Blocking DNS Network Traffic based on criteria such as IP address, domain name, or DNS query type.","Rules are implemented that filter DNS queries using criteria such as: 
- Client subnet
- Type of network protocol used in query
- Fully qualified domain name (FQDN) of record in the query
- DNS Server IP address that received the DNS request
- Type of DNS record being queried
- Time of day the query is received
- Size of the response 

For example, a DNS policy can be created for blocking DNS queries for FQDNs that have been identified as unauthorized.",https://d3fend.mitre.org/technique/d3f:DNSDenylisting
